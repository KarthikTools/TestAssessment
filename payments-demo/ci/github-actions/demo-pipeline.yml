name: Demo Pipeline - Service Virtualization

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'
  PYTHON_VERSION: '3.11'

jobs:
  build-wiremock-extension:
    name: Build WireMock Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Build WireMock Extension
        working-directory: mocks/wiremock-ext
        run: |
          chmod +x ./gradlew
          ./gradlew clean jar

      - name: Upload WireMock Extension
        uses: actions/upload-artifact@v4
        with:
          name: wiremock-extension
          path: mocks/wiremock-ext/build/libs/*.jar

  test-python-magicmock:
    name: Test Python MagicMock
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run MagicMock tests
        working-directory: python/risk_policy
        run: |
          python -m pytest tests/ -v --tb=short

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: python-test-results
          path: python/risk_policy/.pytest_cache/

  test-java-integration:
    name: Test Java Integration (Testcontainers)
    runs-on: ubuntu-latest
    needs: build-wiremock-extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Download WireMock Extension
        uses: actions/download-artifact@v4
        with:
          name: wiremock-extension
          path: mocks/wiremock-ext/build/libs/

      - name: Run Integration Tests
        working-directory: services/orchestrator-java
        run: |
          chmod +x ./gradlew
          ./gradlew test --info

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: java-test-results
          path: services/orchestrator-java/build/test-results/

  build-orchestrator:
    name: Build Orchestrator
    runs-on: ubuntu-latest
    needs: build-wiremock-extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Download WireMock Extension
        uses: actions/download-artifact@v4
        with:
          name: wiremock-extension
          path: mocks/wiremock-ext/build/libs/

      - name: Build Spring Boot Application
        working-directory: services/orchestrator-java
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: orchestrator-jar
          path: services/orchestrator-java/build/libs/*.jar

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-wiremock-extension, build-orchestrator]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download WireMock Extension
        uses: actions/download-artifact@v4
        with:
          name: wiremock-extension
          path: mocks/wiremock-ext/build/libs/

      - name: Download Orchestrator JAR
        uses: actions/download-artifact@v4
        with:
          name: orchestrator-jar
          path: services/orchestrator-java/build/libs/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker images
        run: |
          cd docker
          docker-compose -f docker-compose.local.yml build

  demo-validation:
    name: Demo Validation
    runs-on: ubuntu-latest
    needs: [test-python-magicmock, test-java-integration, build-orchestrator]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: python-test-results
          path: python/risk_policy/.pytest_cache/

      - name: Download Java test results
        uses: actions/download-artifact@v4
        with:
          name: java-test-results
          path: services/orchestrator-java/build/test-results/

      - name: Generate Demo Report
        run: |
          echo "# Service Virtualization Demo Report" > demo-report.md
          echo "Generated: $(date)" >> demo-report.md
          echo "" >> demo-report.md
          echo "## Test Results Summary" >> demo-report.md
          echo "" >> demo-report.md
          echo "### Python MagicMock Tests" >> demo-report.md
          echo "- Location: python/risk_policy/tests/" >> demo-report.md
          echo "- Status: âœ… Completed" >> demo-report.md
          echo "" >> demo-report.md
          echo "### Java Integration Tests (Testcontainers)" >> demo-report.md
          echo "- Location: services/orchestrator-java/src/test/java/" >> demo-report.md
          echo "- Status: âœ… Completed" >> demo-report.md
          echo "" >> demo-report.md
          echo "## Components Validated" >> demo-report.md
          echo "1. âœ… WireMock Extension (Custom Transformer)" >> demo-report.md
          echo "2. âœ… MockServer (JavaScript Callback)" >> demo-report.md
          echo "3. âœ… MagicMock (Python Unit Tests)" >> demo-report.md
          echo "4. âœ… Testcontainers (Integration Tests)" >> demo-report.md
          echo "5. âœ… Spring Boot Orchestrator" >> demo-report.md
          echo "6. âœ… OpenAPI Specification" >> demo-report.md

      - name: Upload Demo Report
        uses: actions/upload-artifact@v4
        with:
          name: demo-report
          path: demo-report.md

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [demo-validation]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Demo Report
        uses: actions/download-artifact@v4
        with:
          name: demo-report
          path: ./

      - name: Display Summary
        run: |
          echo "ðŸŽ‰ Service Virtualization Demo Pipeline Completed!"
          echo ""
          echo "ðŸ“‹ Components Implemented:"
          echo "  â€¢ WireMock Extension (Dynamic Risk Scoring)"
          echo "  â€¢ MockServer (Tokenization Callback)"
          echo "  â€¢ MagicMock (Fast Unit Tests)"
          echo "  â€¢ Testcontainers (Integration Testing)"
          echo "  â€¢ Spring Boot Orchestrator"
          echo "  â€¢ OpenAPI Specification"
          echo ""
          echo "ðŸš€ Ready for Demo!"
          echo ""
          cat demo-report.md
