version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: payments-postgres
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: payments-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: payments-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  wiremock:
    image: wiremock/wiremock:3.6.0
    container_name: payments-wiremock
    ports:
      - "18080:8080"
    volumes:
      - ../mocks/wiremock/mappings:/home/wiremock/mappings
      - ../mocks/wiremock-ext/build/libs/wiremock-ext-1.0.0.jar:/var/wiremock/extensions/wm-ext.jar
    environment:
      HMAC_SECRET: demo-secret
    command: --extensions com.demo.wm.RiskTransformer --port 8080 --verbose
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/__admin/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  mockserver:
    image: mockserver/mockserver:5.15.0
    container_name: payments-mockserver
    ports:
      - "18081:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /config/expectations.json
    volumes:
      - ../mocks/mockserver/init/expectations.json:/config/expectations.json
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:1080/status || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  orchestrator:
    build:
      context: ../services/orchestrator-java
      dockerfile: Dockerfile
    container_name: payments-orchestrator
    ports:
      - "8088:8088"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      wiremock:
        condition: service_healthy
      mockserver:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/payments
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      APP_KAFKA_BOOTSTRAP: kafka:9092
      APP_RISKBASEURL: http://wiremock:8080
      APP_TOKENIZEBASEURL: http://mockserver:1080
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8088/payments/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
